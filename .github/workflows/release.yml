# .github/workflows/release.yml
name: "Create and Publish Release"

on:
  workflow_dispatch:
    inputs:
      release_pr_number:
        description: "The pull request number to merge that contains the package version bumps and changelog updates."
        required: true
        type: 'number'
      node_version:
        description: "The Node.js version to use for publishing"
        required: true
        type: 'string'
        default: '22.x'
      release_version:
        description: "The tag name for the release (e.g., v1.2.3)"
        required: true
        type: 'string'
      dry_run:
        description: 'Whether this is a dry_run publish.'
        default: 'true'
        required: true
        type: 'boolean'

jobs:
  release_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases and tags, and deleting branches
      pull-requests: write # Needed for merging the PR
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"

      - name: Merge Pull Request
        uses: actions/github-script@v7
        id: merge_pr
        with:
          script: |
            const octokit = github.getOctokit('${{ github.token }}'); // Initialize Octokit with token
            await octokit.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.release_pr_number }},
            });
            core.setOutput('merged', result.data.merged);

      - name: Get Pull Request Body
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.release_pr_number }},
            });
            core.setOutput('RELEASE_NOTES', result.data.body);
            core.setOutput('RELEASE_TAG', ${{ github.event.inputs.release_version }});

      - name: Create Release
        uses: softprops/action-gh-release@v1 # Using softprops/action-gh-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          name: ${{ github.event.inputs.release_version }} # Use release_version as title
          body: ${{ steps.get_pr_info.outputs.RELEASE_NOTES }}
          generate_release_notes: false #  prevent default notes

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Publish release to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ALGORAND_NPM_TOKEN }}
        run: |
          if git diff-index --quiet HEAD --; then
            if ${{ github.event.inputs.dry_run }} == false; then
              echo "DRY RUN: ${{ github.event.inputs.dry_run }}.  Running npm publish"
              npm ci
              npm run build
              npm publish
            else
              echo "DRY RUN: ${{ github.event.inputs.dry_run }}.  Running npm publish --dry-run"
              npm ci
              npm run build
              npm publish --dry-run
            fi
          else
            echo "There are unpublished changes"
            exit 1
          fi

      - name: Delete branch after merge
        if: steps.merge_pr.outputs.merged == 'true' # only delete if merge was successful
        uses:  actions/github-script@v7
        with:
          script: |
            const octokit = github.getOctokit('${{ github.token }}');
            try{
              await octokit.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/release/${{ github.event.inputs.release_version }}`,
              });
            } catch (error) {
              console.error("Failed to delete branch:", error);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack - Release Completed
        id: slack-release
        uses: slackapi/slack-github-action@v1.27.1
        env:
          SDK: ${{ github.repository.name }}
          RELEASE_TAG: ${{ steps.get_pr_info.outputs.RELEASE_TAG }} # Use the stored release tag.
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_RELEASE_NOTIFICATIONS_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ env.SDK }} ${{ env.RELEASE_TAG }}* was released today. https://github.com/algorand/${{ env.SDK }}/releases/tag/${{ env.RELEASE_TAG }}"
                  }
                }
              ]
            }

